@model ProductDetailsModel
@using Nop.Core.Domain.Seo;
@using Nop.Core.Domain.Orders
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            <div data-productid="@Model.Id">
                <div class="product-essential">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    <!--product pictures-->
                    @await Html.PartialAsync("_ProductDetailsPictures", Model)
                    <div class="overview">
                        @await Html.PartialAsync("_Discontinued", Model)
                        <div class="product-name">
                            <h1>
                                @Model.Name
                            </h1>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                        <!--product reviews-->
                        @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        <!--manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        <!--availability-->
                        @await Html.PartialAsync("_Availability", Model)
                        <!--SKU, MAN, GTIN, vendor-->
                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                        <!--delivery-->
                        @await Html.PartialAsync("_DeliveryInfo", Model)
                        <!--sample download-->
                        @await Html.PartialAsync("_DownloadSample", Model)
                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                            @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                        }
                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        <!--rental info-->
                        @{
                            var dataDictRental = new ViewDataDictionary(ViewData);
                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                            @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                        }
                        <!--price & add to cart & estimate shipping-->
                        @{
                            var dataDictPrice = new ViewDataDictionary(ViewData);
                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                            @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)

                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                            if (Model.AddonProducts.Any())
                            {
                                <input type="button" id="show-design-@Model.Id" class="button-1 add-to-cart-button" value="Show Design" data-productid="@Model.Id" onclick="ShowDesignClicked()" />
                            }
                            else
                            {
                                @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                            }
                            @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)
                        }
                        <!--wishlist, compare, email a friend-->
                        <div class="overview-buttons">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                            @{
                                var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                            }
                            @await Html.PartialAsync("_CompareProductsButton", Model)
                            @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                        </div>
                        @if (Model.Name.Contains("Mix"))
                        {
                            <div class="product-grid" style="border: 2px #0b0b0b;">
                                <div class="item-grid" style="border: 2px #0b0b0b;height:350px;overflow: auto;">
                                    @foreach (var product in Model.AddonProducts)
                                    {
                                        <div class="item-box" style="margin:0px">
                                            <div class="product-item" style="border: 1px solid grey" data-productid="@product.Id">
                                                <div class="picture-addon">
                                                    <a style=":before padding-top: 100% !important;" title="@Model.DefaultPictureModel.Title">
                                                        <img src="@product.PictureModels.FirstOrDefault().ThumbImageUrl" alt="@product.PictureModels.FirstOrDefault().AlternateText" title="@product.PictureModels.FirstOrDefault().Title" onclick="imageClicked(@product.Id, '@product.PictureModels.FirstOrDefault().ThumbImageUrl',@product.Weight)" />
                                                    </a>
                                                </div>
                                                <h2 class="product-title" style="text-align: center">@product.Weight.ToString() gr</h2>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        @await Html.PartialAsync("_ShareButton", Model)
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                    </div>
                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                    {
                        <div class="full-description">
                            @Html.Raw(Model.FullDescription)
                        </div>
                    }
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                <div class="product-collateral">
                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                </div>
                @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
        <div id="dialog" title="Please Select Slot">
            <select id="slotSelect">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
            </select>
        </div>
        <div id="dialog-design" class="design-dialog">
            <div class="necklace-left">
                <div class="picture necklace-charm">
                    <img style="transform: rotate(85deg);"
                         id="final-product-img-slot1" />
                </div>
                <div class="picture necklace-charm">
                    <img style="transform: rotate(45deg);"
                         id="final-product-img-slot2" />
                </div>
            </div>
            <div class="necklace">
                <div class="picture necklace-picture" style="display:inline-block">
                    <img alt="@Model.DefaultPictureModel.AlternateText"
                         src="@Model.DefaultPictureModel.ImageUrl"
                         title="@Model.DefaultPictureModel.Title"
                         id="main-product-img-@Model.Id"
                         style="width:100%;" />
                </div>
                <div class="picture necklace-charm" style="text-align:center">
                    <img style="transform: rotate(0deg);"
                         id="final-product-img-slot3" />
                </div>
            </div>
            <div class="necklace-right">
                <div class="picture necklace-charm">
                    <img style="transform: rotate(315deg) scaleX(-1);"
                         id="final-product-img-slot4" />
                </div>
                <div class="picture necklace-charm">
                    <img style="transform: rotate(275deg) scaleX(-1);"
                         id="final-product-img-slot5" />
                </div>
            </div>
            <div style="padding-top:150px">
                <h1 style="text-align:center" id="totalWeight"></h1>
            </div>
        </div>
    </div>
</div>

<script>
    window.onload = (event) => {
        $("#slot1").hide();
        $("#slot2").hide();
        $("#slot3").hide();
        $("#slot4").hide();
        $("#slot5").hide();

        $("#dialog").dialog({
            autoOpen: false,
            width: 350,
            buttons: [
                {
                    text: "Ok",
                    icon: "ui-icon-plusthick",
                    click: function () {
                        slotSelected();
                        $(this).dialog("close");
                    }
                    // Uncommenting the following line would hide the text,
                    // resulting in the label being used as a tooltip
                    //showText: false
                }
            ]
        });
        $("#dialog-design").dialog({
            autoOpen: false,
            resizable: false,
                    width: "70%",
                    buttons: [
                        {
                            text: "Approve",
                            icon: "ui-icon-plusthick",
                            click: function () {
                                ApproveDesing();
                                $(this).dialog("close");
                            }
                            // Uncommenting the following line would hide the text,
                            // resulting in the label being used as a tooltip
                            //showText: false
                        }
                    ]
                });
    };

    function imageClicked(subProductId, imageUrl,weight) {
        $("#dialog").data('subProductId', subProductId).data('imageUrl', imageUrl).data('weight',weight).dialog("open");
    }

    function ShowDesignClicked() {
        $("#dialog-design").dialog("open");
        getTotalWeight();

    }

    function ApproveDesing(){
        AddMainToCart();
        var product = document.getElementById('final-product-img-slot1');
        var charmId1 = product.getAttribute("data-charmid");
        if (!isNaN(charmId1) && charmId1 != null) {
            AddCharmToCart(charmId1);
        }
        product = document.getElementById('final-product-img-slot2');
        var charmId2 = product.getAttribute("data-charmid");
        if (!isNaN(charmId2) && charmId2!=null) {
            AddCharmToCart(charmId2);
        }
        product = document.getElementById('final-product-img-slot3');
        var charmId3 = product.getAttribute("data-charmid");
        if (!isNaN(charmId3) && charmId3 != null) {
            AddCharmToCart(charmId3);
        }
        product = document.getElementById('final-product-img-slot4');
        var charmId4 = product.getAttribute("data-charmid");
        if (!isNaN(charmId4) && charmId4 != null) {
            AddCharmToCart(charmId4);
        }
        product = document.getElementById('final-product-img-slot5');
         var charmId5 =product.getAttribute("data-charmid");
        if (!isNaN(charmId5) && charmId5 != null) {
            AddCharmToCart(charmId5);
        }
    }
    function AddMainToCart() {
        AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new {productId = Model.Id, shoppingCartTypeId = (int) ShoppingCartType.ShoppingCart})', '#product-details-form',false); return false;
    }
      function AddCharmToCart(charmId) {
          AjaxCart.addproducttocart_details('/addproducttocart/details/' + charmId + '/1', '#product-details-form',false); return false;
    }
    function slotSelected() {
        var selectedSlot = $("#slotSelect").val();
        var subProductId = $("#dialog").data('subProductId');
        var imageUrl = $("#dialog").data('imageUrl');
        var weight = $("#dialog").data('weight');
        setImage(selectedSlot, subProductId, imageUrl);
        setImageForFinal(selectedSlot, subProductId, imageUrl,weight);
    }

    function setImage(selectedSlot, subProductId, imageUrl) {
        var imagePrefix = "#main-product-img-slot";
        var imgId = imagePrefix.concat(selectedSlot);
        $(imgId).attr("src", imageUrl);
        $(imgId).attr("data-charmid", subProductId);

        var slotPrefix = "#slot";
        var slotId = slotPrefix.concat(selectedSlot);
        $(slotId).show();
    }

    function removeImage(removedSlot) {
        var imagePrefix = "#main-product-img-slot";
        var imgId = imagePrefix.concat(removedSlot);
        $(imgId).removeAttr("src");
        $(imgId).removeAttr("data-charmid");

        var designImagePrefix = "#final-product-img-slot";
        var designImgId = designImagePrefix.concat(removedSlot);
        $(designImgId).removeAttr("src");
        $(designImgId).removeAttr("data-charmid");

        var slotPrefix = "#slot";
        var slotId = slotPrefix.concat(removedSlot);
        $(slotId).hide();
    }
    function setImageForFinal(selectedSlot, subProductId, imageUrl, weight) {
        var str1 = "#final-product-img-slot";
        var strweight1 = "#slotweight"
        var str2 = selectedSlot;
        var imgId = str1.concat(str2);
        var weightId = strweight1.concat(str2);
        $(imgId).attr("src", imageUrl);
        $(imgId).attr("data-charmid", subProductId);
        $(imgId).attr("data-weight", weight);
    }
    function getTotalWeight() {
        var product = document.getElementById('final-product-img-slot1');
        var charmWeight = 0;
        var weight1 = parseFloat(product.getAttribute("data-weight"));
        if (!isNaN(weight1))
            charmWeight += weight1;
        //var weight1 = $("#final-product-img-slot1").getAttribute("data-weight");
        product = document.getElementById('final-product-img-slot2');
        var weight2 = parseFloat(product.getAttribute("data-weight"));
        if (!isNaN(weight2))
            charmWeight += weight2;
        product = document.getElementById('final-product-img-slot3');
        var weight3 = parseFloat(product.getAttribute("data-weight"));
        if (!isNaN(weight3))
            charmWeight += weight3;
        product = document.getElementById('final-product-img-slot4');
        var weight4 = parseFloat(product.getAttribute("data-weight"));
        if (!isNaN(weight4))
            charmWeight += weight4;
        product = document.getElementById('final-product-img-slot5');
        var weight5 = parseFloat(product.getAttribute("data-weight"));
        if (!isNaN(weight5))
            charmWeight += weight5;
        var total = charmWeight +@Model.Weight;
        var totalWeight = document.getElementById('totalWeight')
        totalWeight.innerHTML = "Total Weight: " + total.toFixed(2) +" gr";
        //$("#totalweight").attr("value", total);
        //alert(total);
    }
</script>